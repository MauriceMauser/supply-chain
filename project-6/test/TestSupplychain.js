// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
const SupplyChain = artifacts.require('SupplyChain')
const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {

    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = 4 // Cantor pair of 1 and 1
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('0.1', "ether")
    const walletBalance = web3.utils.toWei('0.2', "ether")
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const unauthorizedCaller = accounts[9]
    const otherProduct = 505
    const otherFarmer = accounts[8]
    const otherDistributor = accounts[7];
    const notEnough = web3.utils.toWei('0.01', "ether");

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async() => {
        const supplyChain = await SupplyChain.new();
        await supplyChain.addFarmer(originFarmerID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        var caller = originFarmerID;
        
        // Watch the emitted event Harvested()
        var event = await supplyChain.Harvested({}, (err, res) => {
            eventEmitted = true;
        });

        // Check that unauthorized Harvest reverts
        await truffleAssert.reverts(
            supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: unauthorizedCaller }),
            'Only the farmer is authorized'
        );

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: caller
        });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: caller });
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
        assert.equal(resultBufferTwo[2], 4, 'Error: Invalid ProductID')
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid Item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async() => {
        const supplyChain = await SupplyChain.new()
        var caller = originFarmerID;
        await supplyChain.addFarmer(originFarmerID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Processed()
        var event = await supplyChain.Harvested({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        // Check that unauthorized Processing reverts
        await truffleAssert.reverts(
            supplyChain.processItem(upc, { from: otherFarmer }),
            'Wrong caller'
        );

        // Mark an item as Processed by calling function processtItem()
        await supplyChain.processItem(upc, { from: caller });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async() => {
        const supplyChain = await SupplyChain.new();
        var caller = originFarmerID;
        await supplyChain.addFarmer(originFarmerID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Packed()
        var event = await supplyChain.Packed({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        // Check that early Packing reverts
        await truffleAssert.reverts(
            supplyChain.packItem(upc, { from: originFarmerID }),
            'Must be processed'  
        );
        await supplyChain.processItem(upc, { from: originFarmerID });
        
        // Check that unauthorized Packing reverts
        await truffleAssert.reverts(
            supplyChain.packItem(upc, { from: otherFarmer }),
            'Wrong caller'
        );

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, { from: caller });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async() => {
        const supplyChain = await SupplyChain.new();
        var caller = originFarmerID;
        await supplyChain.addFarmer(originFarmerID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event ForSale()
        var event = await supplyChain.ForSale({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        await supplyChain.processItem(upc, { from: originFarmerID });
        // Check that early Selling reverts
        await truffleAssert.reverts(
            supplyChain.sellItem(upc, productPrice, { from: originFarmerID }),
            'Must be packed'  
        );
        supplyChain.packItem(upc, { from: originFarmerID });

        // Check that unauthorized Selling reverts
        await truffleAssert.reverts(
            supplyChain.sellItem(upc, productPrice, { from: otherFarmer }),
            'Wrong caller'
        );

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, { from: caller });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Price');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async() => {
        const supplyChain = await SupplyChain.new();
        var caller = distributorID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        // Check that early Buying reverts
        await truffleAssert.reverts(
            supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: '0' }),
            'Must be for sale'  
        );
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });

        // Check that unauthorized Buying reverts
        // A. Not enough
        await truffleAssert.reverts(
            supplyChain.buyItem(upc, { from: distributorID, value: notEnough, gasPrice: 0 }),
            'Insufficient funds sent'  
        ); 
        // B. Not a distributor
        await truffleAssert.reverts(
            supplyChain.buyItem(upc, { from: unauthorizedCaller, value: productPrice, gasPrice: 0 }),
            'Only the distributor is authorized'  
        );

        // Mark an item as Sold by calling function buyItem()
        let balanceOfFarmerBeforeTransaction = await web3.eth.getBalance(originFarmerID);
        let balanceOfDistributorBeforeTransaction = await web3.eth.getBalance(caller);
        await supplyChain.buyItem(upc, { from: caller, value: walletBalance, gasPrice: '0' });
        let balanceOfFarmerAfterTransaction = await web3.eth.getBalance(originFarmerID);
        let balanceOfDistributorAfterTransaction = await web3.eth.getBalance(caller);

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: caller });
        var resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        let expectedBalanceOfFarmer = Number(balanceOfFarmerBeforeTransaction) + Number(productPrice);
        let expectedBalanceOfDistributor = Number(balanceOfDistributorBeforeTransaction) - Number(productPrice);

        // Verify the result set
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid OwnerID');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid DistributorID');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid Item State');
        assert.equal(balanceOfFarmerAfterTransaction, expectedBalanceOfFarmer, 'Error: farmer shows incorrect balance');
        assert.equal(balanceOfDistributorAfterTransaction, expectedBalanceOfDistributor, 'Error: distributor shows incorrect balance');
        assert.equal(eventEmitted, true, 'Invalid event emitted');      
    })    

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async() => {
        const supplyChain = await SupplyChain.new();
        var caller = distributorID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addDistributor(otherDistributor);

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Shipped()
        var event = supplyChain.Shipped({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        // Check that early Shipping reverts
        await truffleAssert.reverts(
            supplyChain.shipItem(upc, { from: distributorID }),
            'Must be sold'  
        );
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: 0 });

        // Check that unauthorized Shipping reverts
        await truffleAssert.reverts(
            supplyChain.shipItem(upc, { from: otherDistributor }),
            'Wrong caller'  
        );

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, { from: caller });
        
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async() => {
        const supplyChain = await SupplyChain.new();
        var caller = retailerID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        
        // Watch the emitted event Received()
        var event = supplyChain.Received({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, {
            from: originFarmerID
        });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: 0 });
        // Check that early Receiving reverts
        await truffleAssert.reverts(
            supplyChain.receiveItem(upc, { from: retailerID }),
            'Must be shipped'  
        );
        await supplyChain.shipItem(upc, { from: distributorID });

        // Check that unauthorized Shipping reverts
        await truffleAssert.reverts(
            supplyChain.receiveItem(upc, { from: unauthorizedCaller }),
            'Only the retailer is authorized'  
        );

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receiveItem(upc, { from: caller });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: caller });
        var resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferOne[2], caller, 'Error: Invalid OwnerID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid RetailerID');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid Item State');
        assert.equal(eventEmitted, true, 'Invalid event emitted');
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async() => {
        const supplyChain = await SupplyChain.new();
        let caller = consumerID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
        
        // Declare and Initialize a variable for event
        let eventEmitted = false;
        
        // Watch the emitted event Purchased()
        let event = await supplyChain.Purchased({}, (err, res) => {
            eventEmitted = true;
        });

        // Prepare Supply Chain
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: 0 });
        await supplyChain.shipItem(upc, { from: distributorID });
        // Check that early Purchasing reverts
        await truffleAssert.reverts(
            supplyChain.purchaseItem(upc, { from: consumerID }),
            'Must be received'  
        );
        await supplyChain.receiveItem(upc, { from: retailerID });

        // Check that unauthorized Purchasing reverts
        await truffleAssert.reverts(
            supplyChain.purchaseItem(upc, { from: unauthorizedCaller }),
            'Only consumer is authorized'  
        );

        // Mark an item as Purchased by calling function purchaseItem()
        await supplyChain.purchaseItem(upc, { from: caller });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: caller });
        var resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });

        // Verify the result set
        assert.equal(resultBufferOne[2], caller, 'Error: Invalid OwnerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid ConsumerID');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid Item State');        
    })    

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.new();
        let caller = ownerID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
        
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: 0 });
        await supplyChain.shipItem(upc, { from: distributorID });
        await supplyChain.receiveItem(upc, { from: retailerID });
        await supplyChain.purchaseItem(upc, { from: consumerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc, { from: caller });
        
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');  
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.new();
        let caller = ownerID;
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);

        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes, { from: originFarmerID });
        await supplyChain.processItem(upc, { from: originFarmerID });
        await supplyChain.packItem(upc, { from: originFarmerID });
        await supplyChain.sellItem(upc, productPrice, { from: originFarmerID });
        await supplyChain.buyItem(upc, { from: distributorID, value: productPrice, gasPrice: 0 });
        await supplyChain.shipItem(upc, { from: distributorID });
        await supplyChain.receiveItem(upc, { from: retailerID });
        await supplyChain.purchaseItem(upc, { from: consumerID });

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        var resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc, { from: caller });
        
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid SKU');
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid UPC');
        assert.equal(resultBufferTwo[2], 4, 'Error: Invalid ProductID');
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid Product Notes');
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid Product Price');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid Item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid DistributorID');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid RetailerID');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid ConsumerID');
    })

});

