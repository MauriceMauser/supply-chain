pragma solidity ^0.5.8;

import '../../node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol';

import { FarmerRole } from "../coffeeaccesscontrol/FarmerRole.sol";
import { DistributorRole } from "../coffeeaccesscontrol/DistributorRole.sol";
import { RetailerRole } from "../coffeeaccesscontrol/RetailerRole.sol";
import { ConsumerRole } from "../coffeeaccesscontrol/ConsumerRole.sol";

contract SupplyChain is FarmerRole, DistributorRole, RetailerRole, ConsumerRole {
  using SafeMath for uint256;

  address payable owner;
  uint public upc; // Universal Product Code (UPC)
  uint public sku; // Stock Keeping Unit (SKU)
  mapping (uint => Item) public items; // maps UPC -> Item
  mapping (uint => ProductState) public products;
  // Track item's journey through supply chain
  mapping (uint => string[]) public itemsHistory; // maps UPC -> TxHash array

  enum State {
    Harvested,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Harvested;

  struct Item {
    uint sku;  // Stock Keeping Unit (SKU)
    uint upc;  // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    // address payable ownerID;    // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID;     // Metamask-Ethereum address of the Farmer
    string  originFarmName;
    string  originFarmInformation;
    string  originFarmLatitude;
    string  originFarmLongitude;
    // uint256 productID;          // potentially a combination of upc + sku
    // string  productNotes;
    // uint    productPrice;
    // State   itemState;          // Product State as represented in the enum above
    // address distributorID;      // Metamask-Ethereum address of the Distributor
    // address retailerID;         // Metamask-Ethereum address of the Retailer
    // address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  struct ProductState {
    uint256 productID;          // Cantor Pair of UPC and SKU
    address payable ownerID;    // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    string  productNotes;
    uint    productPrice;
    State   itemState;          // Product State as represented in the enum above
    address distributorID;      // Metamask-Ethereum address of the Distributor
    address retailerID;         // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  event Harvested(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  modifier onlyOwner() {
    require(msg.sender == owner, 'Must be owner');
    _;
  }

  modifier verifyCaller (address _address) {
    require(msg.sender == _address, 'Wrong caller');
    _;
  }

  modifier paidEnough(uint _price) {
    require(msg.value >= _price, 'Insufficient funds sent');
    _;
  }
  
  // Return change
  modifier checkValue(uint _upc) {
    _;
    uint price = products[_upc].productPrice;
    require(msg.value >= price, 'Insufficient funds sent');
    uint amountToReturn = msg.value - price;
    // items[_upc].consumerID.transfer(amountToReturn);
    msg.sender.transfer(amountToReturn);
  }

  modifier harvested(uint _upc) {
    require(products[_upc].itemState == State.Harvested, 'Must be harvested');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(products[_upc].itemState == State.Processed, 'Must be processed');
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(products[_upc].itemState == State.Packed, 'Must be packed');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(products[_upc].itemState == State.ForSale, 'Must be for sale');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(products[_upc].itemState == State.Sold, 'Must be sold');
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(products[_upc].itemState == State.Shipped, 'Must be shipped');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(products[_upc].itemState == State.Received, 'Must be received');
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(products[_upc].itemState == State.Purchased, 'Must be purchased');
    _;
  }

  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(msg.sender);
    }
  }

  function _new_productID
                        (
                          uint256 _upc,
                          uint256 _sku
                        )
                        internal
                        pure
                        returns
                        (
                          uint256
                        )
  {
    // Cantor Pairing Function - https://en.wikipedia.org/wiki/Pairing_function
    uint256 _sumA = _upc.add(_sku);
    uint256 _sumB = _sumA.add(1);
    uint256 _product = _sumA.mul(_sumB);
    uint256 _quotient = _product.div(2);
    return _quotient.add(_sku);
  }

  function harvestItem
                      (
                        uint _upc,
                        address _originFarmerID,
                        string memory _originFarmName,
                        string memory _originFarmInformation,
                        string memory _originFarmLatitude,
                        string memory _originFarmLongitude,
                        string memory _productNotes
                      )
                      public
                      onlyFarmer()
  {
    // Add the new item as part of Harvest
    items[_upc].upc = _upc;
    items[_upc].sku = sku;
    products[_upc].ownerID = msg.sender;
    items[_upc].originFarmerID = _originFarmerID;
    items[_upc].originFarmName = _originFarmName;
    items[_upc].originFarmInformation = _originFarmInformation;
    items[_upc].originFarmLatitude = _originFarmLatitude;
    items[_upc].originFarmLongitude = _originFarmLongitude;
    products[_upc].productID = _new_productID(_upc, sku);
    products[_upc].productNotes = _productNotes;
    products[_upc].itemState = State.Harvested;
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Harvested(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem
                      (
                        uint _upc
                      )
                      public
                      // Call modifier to check if upc has passed previous supply chain stage
                      harvested(_upc)
                      // Call modifier to verify caller of this function
                      verifyCaller(products[_upc].ownerID)
  {
    // Update the appropriate fields
    products[_upc].itemState = State.Processed;
    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem
                    (
                      uint _upc
                    )
                    public
                    // Call modifier to check if upc has passed previous supply chain stage
                    processed(_upc)
                    // Call modifier to verify caller of this function
                    verifyCaller(products[_upc].ownerID)
  {
    // Update the appropriate fields
    products[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem
                    (
                      uint _upc,
                      uint _price
                    )
                    public
                    // Call modifier to check if upc has passed previous supply chain stage
                    packed(_upc)
                    // Call modifier to verify caller of this function
                    verifyCaller(products[_upc].ownerID)
  {
    // Update the appropriate fields
    products[_upc].productPrice = _price;
    products[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the distributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem
                  (
                    uint _upc
                  )
                  public
                  payable
                  // Call modifier to check if upc has passed previous supply chain stage
                  forSale(_upc)
                  // Call modifer to check if buyer has paid enough
                  paidEnough(products[_upc].productPrice)
                  // Call modifer to send any excess ether back to buyer
                  checkValue(_upc)
                  onlyDistributor()
    {
    // Update the appropriate fields - ownerID, distributorID, itemState
    address payable ownerID = products[_upc].ownerID;
    products[_upc].ownerID = msg.sender;
    products[_upc].distributorID = msg.sender;
    products[_upc].itemState = State.Sold;
    // Transfer money to farmer
    ownerID.transfer(products[_upc].productPrice);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem
                    (
                      uint _upc
                    )
                    public
                    // Call modifier to check if upc has passed previous supply chain stage
                    sold(_upc)
                    // Call modifier to verify caller of this function
                    verifyCaller(products[_upc].ownerID)
    {
    // Update the appropriate fields
    products[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem
                      (
                        uint _upc
                      )
                      public
                      // Call modifier to check if upc has passed previous supply chain stage
                      shipped(_upc)
                      // Access Control List enforced by calling Smart Contract / DApp
                      onlyRetailer()
    {
    // Update the appropriate fields - ownerID, retailerID, itemState
    products[_upc].ownerID = msg.sender;
    products[_upc].retailerID = msg.sender;
    products[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem
                      (
                        uint _upc
                      )
                      public
                      // Call modifier to check if upc has passed previous supply chain stage
                      received(_upc)
                      // Access Control List enforced by calling Smart Contract / DApp
                      onlyConsumer()
  {
    // Update the appropriate fields - ownerID, consumerID, itemState
    products[_upc].ownerID = msg.sender;
    products[_upc].consumerID = msg.sender;
    products[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne
                            (
                              uint _upc
                            )
                            public
                            view
                            returns
                            (
                              uint    itemSKU,
                              uint    itemUPC,
                              address ownerID,
                              address originFarmerID,
                              string memory originFarmName,
                              string memory originFarmInformation,
                              string memory originFarmLatitude,
                              string memory originFarmLongitude
                            )
  {
    // Assign values to the 8 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    ownerID = products[_upc].ownerID;
    originFarmerID = items[_upc].originFarmerID;
    originFarmName = items[_upc].originFarmName;
    originFarmInformation = items[_upc].originFarmInformation;
    originFarmLatitude = items[_upc].originFarmLatitude;
    originFarmLongitude = items[_upc].originFarmLongitude;
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo
                            (
                              uint _upc
                            )
                            public
                            view
                            returns
                            (
                              uint    itemSKU,
                              uint    itemUPC,
                              uint    productID,
                              string memory productNotes,
                              uint    productPrice,
                              uint8   itemState,
                              address distributorID,
                              address retailerID,
                              address consumerID
                            )
  {
    // Assign values to the 9 parameters
    itemSKU = items[_upc].sku;
    itemUPC = items[_upc].upc;
    productID = products[_upc].productID;
    productNotes = products[_upc].productNotes;
    productPrice = products[_upc].productPrice;
    itemState = uint8(products[_upc].itemState);
    distributorID = products[_upc].distributorID;
    retailerID = products[_upc].retailerID;
    consumerID = products[_upc].consumerID;
  }
}
